[{"/Users/gszm/anime_wiki/client/src/index.js":"1","/Users/gszm/anime_wiki/client/src/reportWebVitals.js":"2","/Users/gszm/anime_wiki/client/src/App.jsx":"3","/Users/gszm/anime_wiki/client/src/context/AnimeContext.js":"4","/Users/gszm/anime_wiki/client/src/context/GenreContext.js":"5","/Users/gszm/anime_wiki/client/src/routes/NewGenre.jsx":"6","/Users/gszm/anime_wiki/client/src/routes/LoginPage.jsx":"7","/Users/gszm/anime_wiki/client/src/routes/AnimeDetailPage.jsx":"8","/Users/gszm/anime_wiki/client/src/routes/Home.jsx":"9","/Users/gszm/anime_wiki/client/src/routes/RegistrationPage.jsx":"10","/Users/gszm/anime_wiki/client/src/routes/NewAnime.jsx":"11","/Users/gszm/anime_wiki/client/src/routes/UpdatePage.jsx":"12","/Users/gszm/anime_wiki/client/src/routes/UpdateGenre.jsx":"13","/Users/gszm/anime_wiki/client/src/routes/AllAnimeList.jsx":"14","/Users/gszm/anime_wiki/client/src/routes/ErrorPage.jsx":"15","/Users/gszm/anime_wiki/client/src/routes/GenrePage.jsx":"16","/Users/gszm/anime_wiki/client/src/components/Header.jsx":"17","/Users/gszm/anime_wiki/client/src/components/ShowPage.jsx":"18","/Users/gszm/anime_wiki/client/src/components/NavBar.jsx":"19","/Users/gszm/anime_wiki/client/src/components/GenreList.jsx":"20","/Users/gszm/anime_wiki/client/src/components/AddGenre.jsx":"21","/Users/gszm/anime_wiki/client/src/components/AddAnime.jsx":"22","/Users/gszm/anime_wiki/client/src/components/UpdateAnime.jsx":"23","/Users/gszm/anime_wiki/client/src/components/Register.jsx":"24","/Users/gszm/anime_wiki/client/src/components/Login.jsx":"25","/Users/gszm/anime_wiki/client/src/components/AnimeList.jsx":"26","/Users/gszm/anime_wiki/client/src/components/UpdateGenre.jsx":"27","/Users/gszm/anime_wiki/client/src/components/ErrorPage.jsx":"28","/Users/gszm/anime_wiki/client/src/components/AllAnimeInGivenGenre.jsx":"29","/Users/gszm/anime_wiki/client/src/components/MyLoader.js":"30","/Users/gszm/anime_wiki/client/src/apis/AnimeFinder.js":"31","/Users/gszm/anime_wiki/client/src/context/UserContext.js":"32"},{"size":423,"mtime":1667951812643,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":1659043088039,"results":"35","hashOfConfig":"34"},{"size":2381,"mtime":1667968091227,"results":"36","hashOfConfig":"34"},{"size":551,"mtime":1665782058723,"results":"37","hashOfConfig":"34"},{"size":565,"mtime":1666388039779,"results":"38","hashOfConfig":"34"},{"size":304,"mtime":1659476903102,"results":"39","hashOfConfig":"34"},{"size":298,"mtime":1667597534586,"results":"40","hashOfConfig":"34"},{"size":343,"mtime":1660058405459,"results":"41","hashOfConfig":"34"},{"size":368,"mtime":1660026799657,"results":"42","hashOfConfig":"34"},{"size":321,"mtime":1667597484278,"results":"43","hashOfConfig":"34"},{"size":304,"mtime":1659421461950,"results":"44","hashOfConfig":"34"},{"size":307,"mtime":1659419529560,"results":"45","hashOfConfig":"34"},{"size":307,"mtime":1666388513914,"results":"46","hashOfConfig":"34"},{"size":315,"mtime":1660259344981,"results":"47","hashOfConfig":"34"},{"size":299,"mtime":1663624916008,"results":"48","hashOfConfig":"34"},{"size":332,"mtime":1660058402686,"results":"49","hashOfConfig":"34"},{"size":391,"mtime":1667951609465,"results":"50","hashOfConfig":"34"},{"size":2740,"mtime":1663626802408,"results":"51","hashOfConfig":"34"},{"size":1502,"mtime":1667951372015,"results":"52","hashOfConfig":"34"},{"size":3983,"mtime":1667968623574,"results":"53","hashOfConfig":"34"},{"size":12230,"mtime":1667602882946,"results":"54","hashOfConfig":"34"},{"size":8535,"mtime":1665787169916,"results":"55","hashOfConfig":"34"},{"size":7134,"mtime":1666388950527,"results":"56","hashOfConfig":"34"},{"size":4069,"mtime":1667603263214,"results":"57","hashOfConfig":"34"},{"size":2418,"mtime":1667951116705,"results":"58","hashOfConfig":"34"},{"size":4164,"mtime":1667968610810,"results":"59","hashOfConfig":"34"},{"size":3490,"mtime":1666390398055,"results":"60","hashOfConfig":"34"},{"size":241,"mtime":1663624774135,"results":"61","hashOfConfig":"34"},{"size":2803,"mtime":1663626243377,"results":"62","hashOfConfig":"34"},{"size":399,"mtime":1660236743064,"results":"63","hashOfConfig":"34"},{"size":2097,"mtime":1667852906852,"results":"64","hashOfConfig":"34"},{"size":547,"mtime":1667599597050,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kikipm",{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"72"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"72"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"72"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"72"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"/Users/gszm/anime_wiki/client/src/index.js",[],[],"/Users/gszm/anime_wiki/client/src/reportWebVitals.js",[],[],[],"/Users/gszm/anime_wiki/client/src/App.jsx",[],[],"/Users/gszm/anime_wiki/client/src/context/AnimeContext.js",[],[],"/Users/gszm/anime_wiki/client/src/context/GenreContext.js",[],[],"/Users/gszm/anime_wiki/client/src/routes/NewGenre.jsx",[],[],"/Users/gszm/anime_wiki/client/src/routes/LoginPage.jsx",[],[],"/Users/gszm/anime_wiki/client/src/routes/AnimeDetailPage.jsx",["171"],[],"import React from \"react\";\nimport Header from \"../components/Header\";\nimport AddAnime from \"../components/AddAnime\";\nimport ShowPage from \"../components/ShowPage\";\nimport NavBar from \"../components/NavBar\";\n\nconst Home = () => {\n  return (\n    <div>\n      <NavBar />\n      <Header />\n      <ShowPage />\n    </div>\n  );\n};\n\nexport default Home;","/Users/gszm/anime_wiki/client/src/routes/Home.jsx",[],[],"/Users/gszm/anime_wiki/client/src/routes/RegistrationPage.jsx",[],[],"/Users/gszm/anime_wiki/client/src/routes/NewAnime.jsx",[],[],"/Users/gszm/anime_wiki/client/src/routes/UpdatePage.jsx",[],[],"/Users/gszm/anime_wiki/client/src/routes/UpdateGenre.jsx",[],[],"/Users/gszm/anime_wiki/client/src/routes/AllAnimeList.jsx",[],[],"/Users/gszm/anime_wiki/client/src/routes/ErrorPage.jsx",[],[],"/Users/gszm/anime_wiki/client/src/routes/GenrePage.jsx",[],[],"/Users/gszm/anime_wiki/client/src/components/Header.jsx",[],[],"/Users/gszm/anime_wiki/client/src/components/ShowPage.jsx",["172","173","174"],[],"import React, { useEffect, useContext, useState } from \"react\";\nimport { getSingleAnimeCall } from \"../apis/AnimeFinder\";\nimport { AnimeContext } from \"../context/AnimeContext\";\nimport { useHistory, useParams, Redirect } from \"react-router-dom\";\nimport MyLoader from \"./MyLoader\";\n\nconst ShowPage = (props) => {\n  const { id } = useParams();\n  const { anime, setAnime } = useContext(AnimeContext);\n  const { state, setState } = useState(false);\n  const REQUEST_STATUS = {\n    LOADING: \"loading\",\n    SUCCESS: \"success\",\n    FAILURE: \"failure\",\n  };\n  const [requestStatus, setRequestStatus] = useState(REQUEST_STATUS.LOADING);\n\n  const delay = () => {\n    return new Promise(resolve => setTimeout(resolve, 1000));\n  };\n  \n\n\n  const fetchData = async () => {\n    try {\n      await delay();\n      const response = await getSingleAnimeCall(id);\n      setRequestStatus(REQUEST_STATUS.SUCCESS);\n      console.log(response.data.data.anime);\n      setAnime(response.data.data.anime);\n      setState(response.data.data.anime);\n    } catch (err) {\n      setRequestStatus(REQUEST_STATUS.FAILURE);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [state]);\n\n  if (requestStatus === REQUEST_STATUS.LOADING) return <MyLoader></MyLoader>;\n  if (requestStatus === REQUEST_STATUS.FAILURE) <Redirect to=\"/error\" />;\n\n  return (\n    <div className=\"list-group container\">\n        Anime Show Page Component\n        <table className=\"table-active table-bordered table-striped table-hover table-dark table-sm\">\n        <thead>\n          <tr className=\"bg-secondary text-warning\">\n            <th scope=\"col\" className=\"col-md-3-3 text-center border-light\">Image</th>\n            <th scope=\"col\" className=\"col-md-3-3 text-center border-light\">Name</th>\n            <th scope=\"col\" className=\"col-md-3-3 text-center border-light\">Number of Episodes</th>\n            <th scope=\"col\" className=\"col-md-3-3 text-center border-light\">Year</th>\n          </tr>\n        </thead>\n        <tbody>\n          {anime &&\n            anime.map((anime) => {\n              return (\n                <tr\n                  key={anime.id}\n                  className=\"table-active\"\n                >\n                  <td className=\"col-md-3 text-center border-light\"><img src={anime.image} className=\"img-fluid rounded h-25 w-75 p-1 border border-warning bg-warning\"></img></td>\n                  <td className=\"col-md-3 text-center border-light\">{anime.name}</td>\n                  <td className=\"col-md-3 text-center border-light\">{anime.episodes}</td>\n                  <td className=\"col-md-3 text-center border-light\"> {anime.year}</td>\n                </tr>\n              );\n            })}\n        </tbody>\n        </table>\n    </div>\n  );\n};\n\nexport default ShowPage;\n","/Users/gszm/anime_wiki/client/src/components/NavBar.jsx",["175","176"],[],"/Users/gszm/anime_wiki/client/src/components/GenreList.jsx",["177","178","179"],[],"/Users/gszm/anime_wiki/client/src/components/AddGenre.jsx",["180"],[],"import React, { useState, useContext } from \"react\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { postGenreAPICall } from \"../apis/AnimeFinder\";\nimport { GenresContext } from \"../context/GenreContext\";\n\nconst AddGenre = () => {\n  const { addGenres } = useContext(GenresContext);\n  const [name, setName] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const history = useHistory();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await postGenreAPICall({\n        genre_name: name,\n        genre_image: image,\n        genre_description: description,\n      });\n      console.log(response.data.data);\n      console.log(response.status);\n      addGenres(response.data.data.genres);\n      if (response.status === 201) {\n        history.push(\"/\");\n      }\n    } catch (err) {\n      console.log(err);\n      <Redirect to=\"/error\" />;\n    }\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <h3 className=\"font-weight-light text-left\">Add an Anime</h3>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <form role=\"form\">\n            <div className=\"form-group\">\n              <label htmlFor=\"name\">Name</label>\n              <input\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                className=\"form-control\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"image\">Image Link</label>\n              <input\n                type=\"text\"\n                value={image}\n                onChange={(e) => setImage(e.target.value)}\n                className=\"form-control\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"description\">Description</label>\n              <textarea\n                className=\"form-control\"\n                rows=\"4\"\n                onChange={(e) => setDescription(e.target.value)}\n              ></textarea>\n            </div>\n            <button\n              onClick={handleSubmit}\n              type=\"submit\"\n              className=\"btn btn-primary\"\n            >\n              Add Genre\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddGenre;\n\n// import React, { useState, useContext, useEffect } from \"react\";\n// import { Redirect, useHistory } from \"react-router-dom\";\n// import AnimeFinder, { getGenreCall, postAnimeAPICall } from \"../apis/AnimeFinder\";\n// import { AnimeContext } from \"../context/AnimeContext\";\n// import { GenresContext } from \"../context/GenreContext\";\n\n// const AddAnime = () => {\n//   const { addAnime } = useContext(AnimeContext);\n//   const [name, setName] = useState(\"\");\n//   const [episodes, setEpisodes] = useState();\n//   const [image, setImage] = useState(\"\");\n//   const [year, setYear] = useState();\n//   const [creator, setCreator] = useState(\"\");\n//   const [genreID, setGenreID] = useState();\n//   const { genres, setGenres } = useContext(GenresContext);\n//   const { state, setState } = useState(false);\n//   const { response, setResponse } = useState();\n//   const history = useHistory()\n\n//   const fetchData = async () => {\n//     try {\n//       const response = await getGenreCall();\n//       console.log(response.data.data);\n//       setGenres(response.data.data.genre);\n//       setState(response.data.data);\n//     } catch (err) {}\n//   };\n//   useEffect(() => {\n//     fetchData();\n//   }, [state]);\n\n// const handleSubmit = async (e) => {\n//   e.preventDefault();\n//   try {\n//     const response = await postGenreAPICall({\n//       name,\n//       episodes,\n//       image,\n//       year,\n//       creator,\n//       genre_id: genreID\n//     });\n//     console.log(response.data.data);\n//     console.log(response.status);\n//     addGenre(response.data.data.anime);\n//     if(response.status === 201) {\n//       console.log('The response is equal to 201');\n//       history.push(\"/\")\n//     }\n//   } catch (err) {\n//     console.log(err);\n//     <Redirect to=\"/error\" />\n//   }\n// };\n\n// const handleSubmit = async (e) => {\n//   e.preventDefault();\n//   try {\n//     const response = await AnimeFinder.post(\"/\", {\n//       name,\n//       location,\n//       price_range: priceRange,\n//     });\n//     console.log(response.data.data);\n//     addAnime(response.data.data.restaurant);\n//   } catch (err) {\n//     console.log(err);\n//   }\n// };\n//   CREATE TABLE IF NOT EXISTS public.genres\n// (\n//     id bigserial NOT NULL,\n//     genre_name character varying(45),\n//     genre_image text,\n//     genre_description text,\n//     created_at timestamp with time zone DEFAULT current_timestamp,\n//     updated_at timestamp with time zone DEFAULT now(),\n//     PRIMARY KEY (id)\n// );\n\n// CREATE TABLE IF NOT EXISTS public.anime\n// (\n//     id bigserial NOT NULL,\n//     name character varying(255),\n//     episodes integer,\n//     image text,\n//     year integer,\n//     creator character varying(255),\n//     genre_id bigint,\n//     created_at timestamp with time zone DEFAULT current_timestamp,\n//     updated_at timestamp with time zone DEFAULT now(),\n//     PRIMARY KEY (id)\n// );\n\n// const handleSubmit = async (e) => {\n//   e.preventDefault();\n//   try {\n//     const response = await postAnimeAPICall({\n//       name,\n//       episodes,\n//       image,\n//       year,\n//       creator,\n//       genre_id: genreID\n//     });\n//     console.log(response.data.data);\n//     console.log(response.status);\n//     addAnime(response.data.data.anime);\n//     if(response.status === 201) {\n//       console.log('The response is equal to 201');\n//       history.push(\"/anime\")\n//     }\n//   } catch (err) {\n//     console.log(err);\n//     <Redirect to=\"/error\" />\n//   }\n// };\n//   return (\n// <div className=\"container-fluid\">\n//   <h3 className=\"font-weight-light text-left\">\n//   Add an Anime\n//   </h3>\n//   <div className=\"row\">\n//     <div className=\"col-md-12\">\n//       <form role=\"form\">\n//         <div className=\"form-group\">\n\n// <label htmlFor=\"name\">\n//             Name\n//           </label>\n//           <input\n//           type=\"text\"\n//           value={name}\n//           onChange={(e) => setName(e.target.value)}\n//           className=\"form-control\" />\n//         </div>\n//         <div className=\"form-group\">\n//             <label htmlFor=\"episodes\">\n//                         Number of Episodes\n//                       </label>\n//                       <input\n//                       type=\"number\"\n//                       value={episodes}\n//                       onChange={(e) => setEpisodes(e.target.value)}\n//                       className=\"form-control\" />\n//                     </div>\n//                     <div className=\"form-group\">\n//             <label htmlFor=\"image\">\n//                         Image Link\n//                       </label>\n//                       <input\n//                       type=\"text\"\n//                       value={image}\n//                       onChange={(e) => setImage(e.target.value)}\n//                       className=\"form-control\" />\n//                     </div>\n//                     <div className=\"form-group\">\n//             <label htmlFor=\"year\">\n//                         Year\n//                       </label>\n//                       <input\n//                       type=\"number\"\n//                       value={year}\n//                       onChange={(e) => setYear(e.target.value)}\n//                       className=\"form-control\" />\n//                     </div>\n//         <div className=\"form-group\">\n//           <label htmlFor=\"creator\">\n//             Creator\n//           </label>\n//           <input\n//           type=\"text\"\n//           value={creator}\n//           onChange={(e) => setCreator(e.target.value)}\n//           className=\"form-control\" />\n//         </div>\n//         <div className=\"form-group\">\n//         </div>\n//                 <div className=\"form-group\">\n//                 <label htmlFor=\"select_genre\">Genre</label>\n//                 <select\n//                   className=\"form-control\"\n//                   id=\"genre\"\n//                   value={genreID}\n//                   onChange={(e) => setGenreID(e.target.value)}\n//                   >\n//                   <option value=\"\" disabled selected hidden>Choose a genre</option>\n//                 {genres &&\n//                   genres.map((genre) => {\n//                   return (\n//                     <option value={genre.id} key={genre.id}>{genre.genre_name}</option>\n//                   );\n//                 })}\n//                 </select>\n//         </div>\n// <div className=\"form-group\">\n// <label htmlFor=\"description\">\n//             Description\n//           </label>\n//           <textarea className=\"form-control\" rows=\"4\"></textarea>\n// </div>\n//         <button\n//         onClick={handleSubmit}\n//         type=\"submit\"\n//         className=\"btn btn-primary\">\n//           Add Anime\n//         </button>\n//       </form>\n//     </div>\n//   </div>\n// </div>\n// // /*\n//     <div className=\"mb-2\">\n//         Add Anime Component\n//     <div className=\"mb-2\">\n//         <div className=\"mb-4\">\n//       <form action=\"\">\n//         <div className=\"form-row\">\n//           <div className=\"col\">\n//             <input\n//               value={name}\n//               onChange={(e) => setName(e.target.value)}\n//               type=\"text\"\n//               className=\"form-control\"\n//               placeholder=\"name\"\n//             />\n//           </div>\n//           <div className=\"col\">\n//             <input\n//               value={location}\n//               onChange={(e) => setLocation(e.target.value)}\n//               className=\"form-control\"\n//               type=\"text\"\n//               placeholder=\"location\"\n//             />\n//           </div>\n//           <div className=\"col\">\n//             <select\n//               value={priceRange}\n//               onChange={(e) => setPriceRange(e.target.value)}\n//               className=\"custom-select my-1 mr-sm-2\"\n//             >\n//               <option disabled>Price Range</option>\n//               <option value=\"1\">$</option>\n//               <option value=\"2\">$$</option>\n//               <option value=\"3\">$$$</option>\n//               <option value=\"4\">$$$$</option>\n//               <option value=\"5\">$$$$$</option>\n//             </select>\n//           </div>\n//           <button\n//             onClick={handleSubmit}\n//             type=\"submit\"\n//             className=\"btn btn-primary\"\n//           >\n//             Add\n//           </button>\n//         </div>\n//                <div className=\"form-row\">\n//           <div className=\"col\">\n//             <input\n//               value={name}\n//               onChange={(e) => setName(e.target.value)}\n//               type=\"text\"\n//               className=\"form-control\"\n//               placeholder=\"name\"\n//             />\n//           </div>\n//           <div className=\"col\">\n//             <input\n//               value={location}\n//               onChange={(e) => setLocation(e.target.value)}\n//               className=\"form-control\"\n//               type=\"text\"\n//               placeholder=\"location\"\n//             />\n//           </div>\n//           <div className=\"col\">\n//             <select\n//               value={priceRange}\n//               onChange={(e) => setPriceRange(e.target.value)}\n//               className=\"custom-select my-1 mr-sm-2\"\n//             >\n//               <option disabled>Price Range</option>\n//               <option value=\"1\">$</option>\n//               <option value=\"2\">$$</option>\n//               <option value=\"3\">$$$</option>\n//               <option value=\"4\">$$$$</option>\n//               <option value=\"5\">$$$$$</option>\n//             </select>\n//           </div>\n//           <button\n//             onClick={handleSubmit}\n//             type=\"submit\"\n//             className=\"btn btn-primary\"\n//           >\n//             Add\n//           </button>\n//         </div>\n//       </form>\n//     </div>\n\n//     </div>\n//     </div>\n//     */\n//   );\n// };\n\n// export default AddAnime;\n","/Users/gszm/anime_wiki/client/src/components/AddAnime.jsx",["181","182","183","184","185"],[],"import React, { useState, useContext, useEffect } from \"react\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport AnimeFinder, { getGenreCall, postAnimeAPICall } from \"../apis/AnimeFinder\";\nimport { AnimeContext } from \"../context/AnimeContext\";\nimport { GenresContext } from \"../context/GenreContext\";\n\nconst AddAnime = () => {\n  const { addAnime } = useContext(AnimeContext);\n  const [name, setName] = useState(\"\");\n  const [episodes, setEpisodes] = useState();\n  const [image, setImage] = useState(\"\");\n  const [year, setYear] = useState();\n  const [creator, setCreator] = useState(\"\");\n  const [genreID, setGenreID] = useState();\n  const { genres, setGenres } = useContext(GenresContext);\n  const { state, setState } = useState(false);\n  const { response, setResponse } = useState();\n  const history = useHistory() \n\n  const fetchData = async () => {\n    try {\n      const response = await getGenreCall();\n      console.log(response.data.data);\n      setGenres(response.data.data.genre);\n      setState(response.data.data);\n    } catch (err) {}\n  };\n  useEffect(() => {\n    fetchData();\n  }, [state]);\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   try {\n  //     const response = await AnimeFinder.post(\"/\", {\n  //       name,\n  //       location,\n  //       price_range: priceRange,\n  //     });\n  //     console.log(response.data.data);\n  //     addAnime(response.data.data.restaurant);\n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // };\n  //   CREATE TABLE IF NOT EXISTS public.genres\n// (\n//     id bigserial NOT NULL,\n//     genre_name character varying(45),\n//     genre_image text,\n//     genre_description text,\n//     created_at timestamp with time zone DEFAULT current_timestamp,\n//     updated_at timestamp with time zone DEFAULT now(),\n//     PRIMARY KEY (id)\n// );\n\n// CREATE TABLE IF NOT EXISTS public.anime\n// (\n//     id bigserial NOT NULL,\n//     name character varying(255),\n//     episodes integer,\n//     image text,\n//     year integer,\n//     creator character varying(255),\n//     genre_id bigint,\n//     created_at timestamp with time zone DEFAULT current_timestamp,\n//     updated_at timestamp with time zone DEFAULT now(),\n//     PRIMARY KEY (id)\n// );\n\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n  try {\n    const response = await postAnimeAPICall({\n      name,\n      episodes,\n      image,\n      year,\n      creator,\n      genre_id: genreID\n    });\n    console.log(response.data.data);\n    console.log(response.status);\n    addAnime(response.data.data.anime);\n    if(response.status === 201) {\n      history.push(\"/anime\")\n    }\n  } catch (err) {\n    console.log(err);\n    <Redirect to=\"/error\" />\n  }\n};\n  return (\n<div className=\"container-fluid\">\n  <h3 className=\"font-weight-light text-left\">\n  Add an Anime\n  </h3>\n  <div className=\"row\">\n    <div className=\"col-md-12\">\n      <form role=\"form\">\n        <div className=\"form-group\">\n            \n<label htmlFor=\"name\">\n            Name\n          </label>\n          <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          className=\"form-control\" />\n        </div>\n        <div className=\"form-group\">\n            <label htmlFor=\"episodes\">\n                        Number of Episodes\n                      </label>\n                      <input\n                      type=\"number\"\n                      value={episodes}\n                      onChange={(e) => setEpisodes(e.target.value)}\n                      className=\"form-control\" />\n                    </div>\n                    <div className=\"form-group\">\n            <label htmlFor=\"image\">\n                        Image Link\n                      </label>\n                      <input\n                      type=\"text\"\n                      value={image}\n                      onChange={(e) => setImage(e.target.value)}\n                      className=\"form-control\" />\n                    </div>\n                    <div className=\"form-group\">\n            <label htmlFor=\"year\">\n                        Year\n                      </label>\n                      <input\n                      type=\"number\"\n                      value={year}\n                      onChange={(e) => setYear(e.target.value)}\n                      className=\"form-control\" />\n                    </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"creator\">\n            Creator\n          </label>\n          <input\n          type=\"text\"\n          value={creator}\n          onChange={(e) => setCreator(e.target.value)}\n          className=\"form-control\" />\n        </div>\n        <div className=\"form-group\">\n        </div>\n                <div className=\"form-group\">\n                <label htmlFor=\"select_genre\">Genre</label>\n                <select\n                  className=\"form-control\"\n                  id=\"genre\"\n                  value={genreID}\n                  onChange={(e) => setGenreID(e.target.value)}\n                  >\n                  <option value=\"\" disabled selected hidden>Choose a genre</option>\n                {genres &&\n                  genres.map((genre) => {\n                  return (\n                    <option value={genre.id} key={genre.id}>{genre.genre_name}</option>\n                  );\n                })}\n                </select>\n        </div>\n<div className=\"form-group\">\n<label htmlFor=\"description\">\n            Description\n          </label>\n          <textarea className=\"form-control\" rows=\"4\"></textarea>\n</div>\n        <button \n        onClick={handleSubmit}\n        type=\"submit\"\n        className=\"btn btn-primary\">\n          Add Anime\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n/*\n    <div className=\"mb-2\">\n        Add Anime Component\n    <div className=\"mb-2\">\n        <div className=\"mb-4\">\n      <form action=\"\">\n        <div className=\"form-row\">\n          <div className=\"col\">\n            <input\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"name\"\n            />\n          </div>\n          <div className=\"col\">\n            <input\n              value={location}\n              onChange={(e) => setLocation(e.target.value)}\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"location\"\n            />\n          </div>\n          <div className=\"col\">\n            <select\n              value={priceRange}\n              onChange={(e) => setPriceRange(e.target.value)}\n              className=\"custom-select my-1 mr-sm-2\"\n            >\n              <option disabled>Price Range</option>\n              <option value=\"1\">$</option>\n              <option value=\"2\">$$</option>\n              <option value=\"3\">$$$</option>\n              <option value=\"4\">$$$$</option>\n              <option value=\"5\">$$$$$</option>\n            </select>\n          </div>\n          <button\n            onClick={handleSubmit}\n            type=\"submit\"\n            className=\"btn btn-primary\"\n          >\n            Add\n          </button>\n        </div>\n               <div className=\"form-row\">\n          <div className=\"col\">\n            <input\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"name\"\n            />\n          </div>\n          <div className=\"col\">\n            <input\n              value={location}\n              onChange={(e) => setLocation(e.target.value)}\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"location\"\n            />\n          </div>\n          <div className=\"col\">\n            <select\n              value={priceRange}\n              onChange={(e) => setPriceRange(e.target.value)}\n              className=\"custom-select my-1 mr-sm-2\"\n            >\n              <option disabled>Price Range</option>\n              <option value=\"1\">$</option>\n              <option value=\"2\">$$</option>\n              <option value=\"3\">$$$</option>\n              <option value=\"4\">$$$$</option>\n              <option value=\"5\">$$$$$</option>\n            </select>\n          </div>\n          <button\n            onClick={handleSubmit}\n            type=\"submit\"\n            className=\"btn btn-primary\"\n          >\n            Add\n          </button>\n        </div>\n      </form>\n    </div>\n\n    </div>\n    </div>\n    */\n  );\n};\n\nexport default AddAnime;\n","/Users/gszm/anime_wiki/client/src/components/UpdateAnime.jsx",["186","187","188","189","190","191","192","193","194","195"],[],"import { useLocation, useParams, useHistory, Redirect } from \"react-router-dom\";\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { getSingleAnimeCall, editAnimeCall, getGenreCall } from \"../apis/AnimeFinder\";\nimport { AnimeContext } from \"../context/AnimeContext\";\nimport { GenresContext } from \"../context/GenreContext\";\nimport MyLoader from \"./MyLoader\";\n\nconst UpdateAnime = () => {\n  const { id } = useParams();\n  const { anime, setAnime } = useContext(AnimeContext);\n  const { state, setState } = useState(false);\n\n  const { addAnime } = useContext(AnimeContext);\n  const [name, setName] = useState(\"\");\n  const [episodes, setEpisodes] = useState();\n  const [image, setImage] = useState(\"\");\n  const [year, setYear] = useState();\n  const [creator, setCreator] = useState(\"\");\n  const [genreID, setGenreID] = useState();\n  const [genreName, setGenreName] = useState();\n  const { genres, setGenres } = useContext(GenresContext);\n  const { genreResponse, setGenreResponse } = useState();\n  const history = useHistory() \n  const REQUEST_STATUS = {\n    LOADING: \"loading\",\n    SUCCESS: \"success\",\n    FAILURE: \"failure\",\n  };\n  const [requestStatus, setRequestStatus] = useState(REQUEST_STATUS.LOADING);\n\n  const delay = () => {\n    return new Promise(resolve => setTimeout(resolve, 1000));\n  };\n\n  const fetchData = async () => {\n    try {\n      await delay();\n      const response = await getSingleAnimeCall(id);\n      setRequestStatus(REQUEST_STATUS.SUCCESS);\n            const genreResponse = await getGenreCall();\n      console.log(genreResponse.data.data);\n      setGenres(genreResponse.data.data.genre);\n      // setState(genreResponse.data.data);\n      console.log(response.data.data.anime);\n      setAnime(response.data.data.anime);\n      setName(response.data.data.anime[0].name)\n      setEpisodes(response.data.data.anime[0].episodes)\n      setImage(response.data.data.anime[0].image)\n      setYear(response.data.data.anime[0].year)\n      setCreator(response.data.data.anime[0].creator)\n      setGenreID(response.data.data.anime[0].genre_id)\n      console.log(genres.filter(genre => genre.id == genreID));\n      setGenreName(genres.filter(genre => genre.id == genreID));\n      // console.log(genreName);\n\n      // setState(response.data.data.anime);\n      // setName(response.data.data.anime[0].name)\n      // setEpisodes(response.data.data.anime[0].episodes)\n      // setImage(response.data.data.anime[0].image)\n      // setYear(response.data.data.anime[0].year)\n      // setCreator(response.data.data.anime[0].creator)\n    } catch (err) {\n      setRequestStatus(REQUEST_STATUS.FAILURE);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [state]);\n\n\n  // const fetchData = async () => {\n  //   try {\n  //     const response = await getGenreCall();\n  //     console.log(response.data.data);\n  //     setGenres(response.data.data.genre);\n  //     setState(response.data.data);\n  //   } catch (err) {}\n  // };\n  // useEffect(() => {\n  //   fetchData();\n  // }, [state]);\n\n//       setAnime(response.data.data.anime);\n// setName(response.data.data.anime[0].name)\n// setEpisodes(response.data.data.anime[0].episodes)\n// setImage(response.data.data.anime[0].image)\n// setYear(response.data.data.anime[0].year)\n// setCreator(response.data.data.anime[0].creator)\n\n\n  if (requestStatus === REQUEST_STATUS.LOADING) return <MyLoader></MyLoader>;\n  if (requestStatus === REQUEST_STATUS.FAILURE) <Redirect to=\"/error\" />;\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await editAnimeCall(id, {\n        name,\n        episodes,\n        image,\n        year,\n        creator,\n        genre_id: genreID,\n      });\n      console.log(response.data.data);\n      console.log(response.status);\n      // addAnime(response.data.data.anime);\n      if(response.status === 200) {\n        history.push(\"/anime\")\n      }\n    } catch (err) {\n      console.log(err);\n      <Redirect to=\"/error\" />\n    }\n  };\n\n\n  return (\n    <div className=\"list-group container\">\n        <div className=\"container-fluid\">\n  <h3 className=\"font-weight-light text-left\">\n  Edit an Anime {anime.name}\n  </h3>\n  <div className=\"row\">\n    <div className=\"col-md-12\">\n      <form role=\"form\">\n        <div className=\"form-group\">\n            \n<label htmlFor=\"name\">\n            Name\n          </label>\n          <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          className=\"form-control\" />\n        </div>\n        <div className=\"form-group\">\n            <label htmlFor=\"episodes\">\n                        Number of Episodes\n                      </label>\n                      <input\n                      type=\"number\"\n                      defaultValue={anime.episodes}\n                      value={episodes}\n                      onChange={(e) => setEpisodes(e.target.value)}\n                      className=\"form-control\" />\n                    </div>\n                    <div className=\"form-group\">\n            <label htmlFor=\"image\">\n                        Image Link\n                      </label>\n                      <input\n                      type=\"text\"\n                      value={image}\n                      onChange={(e) => setImage(e.target.value)}\n                      className=\"form-control\" />\n                    </div>\n                    <div className=\"form-group\">\n            <label htmlFor=\"year\">\n                        Year\n                      </label>\n                      <input\n                      type=\"number\"\n                      value={year}\n                      onChange={(e) => setYear(e.target.value)}\n                      className=\"form-control\" />\n                    </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"creator\">\n            Creator\n          </label>\n          <input\n          type=\"text\"\n          value={creator}\n          onChange={(e) => setCreator(e.target.value)}\n          className=\"form-control\" />\n        </div>\n        <div className=\"form-group\">\n        </div>\n                <div className=\"form-group\">\n                <label htmlFor=\"select_genre\">Genre</label>\n                <select\n                  className=\"form-control\"\n                  id=\"genre\"\n                  value={genreID}\n                  onChange={(e) => setGenreID(e.target.value)}\n                  >\n                  \n                {genres &&\n                  genres.map((genre) => {\n                  return (\n                    <>\n                    <option value={genre.id} key={genre.id}>{genre.genre_name}</option>\n                    </>\n                  );\n                })}\n                </select>\n        </div>\n<div className=\"form-group\">\n<label htmlFor=\"description\">\n            Description\n          </label>\n          <textarea className=\"form-control\" rows=\"4\"></textarea>\n</div>\n        <button \n        onClick={handleSubmit}\n        type=\"submit\"\n        className=\"btn btn-primary\">\n          Edit Anime\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n    </div>\n    \n  );\n}\n\nexport default UpdateAnime;\n","/Users/gszm/anime_wiki/client/src/components/Register.jsx",["196","197","198","199","200"],[],"import React, { useState, useContext } from \"react\";\nimport { useLocation, useParams, useHistory, Redirect } from \"react-router-dom\";\nimport { postUserAPICall } from \"../apis/AnimeFinder\";\nimport { UsersContext } from \"../context/UserContext\";\n\nconst Register = () => {\n  const { addUsers } = useContext(UsersContext);\n  const [first, setFirst] = useState(\"\");\n  const [last, setLast] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmation, setConfirmation] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n  const history = useHistory();\n\n  const handleSubmit = async (e) => {\n    // noErrors() = true;\n    e.preventDefault();\n    try {\n      const response = await postUserAPICall({\n        first: first,\n        last: last,\n        username: username,\n        email: email,\n        password: password,\n      });\n      console.log(response.data.data);\n      console.log(response.status);\n      addUsers(response.data.data.users);\n      if (response.status === 201) {\n        history.push(\"/\");\n      }\n    } catch (err) {\n      console.log(err);\n      <Redirect to=\"/error\" />;\n    }\n  };\n\n  //ADD VALIDATION FOR THIS AT LATER TIME\n  // const noErrors = (errors) => {\n  //   if () {\n\n  //   }\n  //   return true\n  // }\n\n  return (\n    <div className=\"container-fluid\">\n      <h3 className=\"font-weight-light text-left\">Registration Page</h3>\n\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <form role=\"form\">\n            <div className=\"form-group\">\n              <label htmlFor=\"first\">First Name</label>\n              <input\n                type=\"text\"\n                value={first}\n                placeholder=\"First Name\"\n                onChange={(e) => setFirst(e.target.value)}\n                className=\"form-control\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"last\">Last Name</label>\n              <input\n                type=\"text\"\n                value={last}\n                placeholder=\"Last Name\"\n                onChange={(e) => setLast(e.target.value)}\n                className=\"form-control\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"creator\">UserName</label>\n              <input\n                type=\"text\"\n                value={username}\n                placeholder=\"Username\"\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"form-control\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"creator\">Email</label>\n              <input\n                type=\"text\"\n                value={email}\n                placeholder=\"Email\"\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"form-control\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"creator\">Password</label>\n              <input\n                type=\"password\"\n                value={password}\n                autoComplete=\"off\"\n                placeholder=\"Password\"\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"form-control\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"creator\">Confirm Password</label>\n              <input\n                type=\"password\"\n                value={confirmation}\n                autoComplete=\"off\"\n                placeholder=\"Confirm Password\"\n                onChange={(e) => setConfirmation(e.target.value)}\n                className=\"form-control\"\n              />\n            </div>\n            <button\n              onClick={handleSubmit}\n              type=\"submit\"\n              className=\"btn btn-primary\"\n            >\n              Create User\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n","/Users/gszm/anime_wiki/client/src/components/Login.jsx",["201","202","203","204","205"],[],"/Users/gszm/anime_wiki/client/src/components/AnimeList.jsx",["206","207","208","209"],[],"/Users/gszm/anime_wiki/client/src/components/UpdateGenre.jsx",["210","211","212","213","214","215","216","217"],[],"import React, { useState, useContext, useEffect  } from \"react\";\nimport { useLocation, useParams, useHistory, Redirect } from \"react-router-dom\";\nimport { getSingleGenreCall, editGenreCall } from \"../apis/AnimeFinder\";\nimport { GenresContext } from \"../context/GenreContext\";\nimport MyLoader from \"./MyLoader\";\n\nconst UpdateGenre = () => {\n  const { id } = useParams();\n  const { genres, setGenres } = useContext(GenresContext);\n  const { addGenres } = useContext(GenresContext);\n  const [name, setName] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const history = useHistory() \n  const { state, setState } = useState(false);\n  const { genreResponse, setGenreResponse } = useState();\n  const REQUEST_STATUS = {\n    LOADING: \"loading\",\n    SUCCESS: \"success\",\n    FAILURE: \"failure\",\n  };\n  const [requestStatus, setRequestStatus] = useState(REQUEST_STATUS.LOADING);\n\n\n  const delay = () => {\n    return new Promise(resolve => setTimeout(resolve, 1000));\n  };\n\n  const fetchData = async () => {\n    try {\n      await delay();\n      const response = await getSingleGenreCall(id);\n      setRequestStatus(REQUEST_STATUS.SUCCESS);\n      setGenres(response.data.data.genre);\n      setName(response.data.data.genre[0].genre_name);\n      setImage(response.data.data.genre[0].genre_image);\n      setDescription(response.data.data.genre[0].genre_description);\n    } catch (err) {\n      setRequestStatus(REQUEST_STATUS.FAILURE);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [state]);\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await editGenreCall(id, {\n        genre_name: name,\n        genre_image: image,\n        genre_description: description,\n      });\n      console.log(response.data.data);\n      console.log(response.status);\n      if(response.status === 200) {\n        history.push(\"/\")\n      }\n    } catch (err) {\n      console.log(err);\n      <Redirect to=\"/error\" />\n    }\n  };\n\nif (requestStatus === REQUEST_STATUS.LOADING) return <MyLoader></MyLoader>;\nif (requestStatus === REQUEST_STATUS.FAILURE) <Redirect to=\"/error\" />;\n\n  return (\n\n<div className=\"container-fluid\">\n  <h3 className=\"font-weight-light text-left\">\n  Edit a Genre\n  </h3>\n  <div className=\"row\">\n    <div className=\"col-md-12\">\n      <form role=\"form\">\n        <div className=\"form-group\">\n            \n<label htmlFor=\"name\">\n            Name\n          </label>\n          <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          className=\"form-control\" />\n        </div>\n                    <div className=\"form-group\">\n            <label htmlFor=\"image\">\n                        Image Link\n                      </label>\n                      <input\n                      type=\"text\"\n                      value={image}\n                      onChange={(e) => setImage(e.target.value)}\n                      className=\"form-control\" />\n                    </div>\n<div className=\"form-group\">\n<label htmlFor=\"description\">\n            Description\n          </label>\n          <textarea value={description} className=\"form-control\" rows=\"4\" onChange={(e) => setDescription(e.target.value)}></textarea>\n</div>\n        <button \n        onClick={handleSubmit}\n        type=\"submit\"\n        className=\"btn btn-primary\">\n          Edit Genre\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n  );\n};\n\nexport default UpdateGenre;","/Users/gszm/anime_wiki/client/src/components/ErrorPage.jsx",[],[],"/Users/gszm/anime_wiki/client/src/components/AllAnimeInGivenGenre.jsx",["218","219","220"],[],"import React, { useEffect, useContext, useState } from \"react\";\nimport { getAnimeInGenre } from \"../apis/AnimeFinder\";\nimport { AnimeContext } from \"../context/AnimeContext\";\nimport { useHistory, useParams, Redirect, Link } from \"react-router-dom\";\nimport MyLoader from \"./MyLoader\";\n\nconst AllAnimeInGivenGenre = (props) => {\n    const { id } = useParams();\n  const { anime, setAnime } = useContext(AnimeContext);\n  let history = useHistory();\n  const REQUEST_STATUS = {\n    LOADING: \"loading\",\n    SUCCESS: \"success\",\n    FAILURE: \"failure\",\n  };\n  const [requestStatus, setRequestStatus] = useState(REQUEST_STATUS.LOADING);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await getAnimeInGenre(id);\n        setRequestStatus(REQUEST_STATUS.SUCCESS);\n        console.log(response.data.data);\n        setAnime(response.data.data.anime);\n      } catch (err) {\n        setRequestStatus(REQUEST_STATUS.FAILURE);\n      }\n    };\n    fetchData();\n  }, []);\n\n  if (requestStatus === REQUEST_STATUS.LOADING) return <MyLoader></MyLoader>;\n  if (requestStatus === REQUEST_STATUS.FAILURE) <Redirect to=\"/error\" />;\n\n  return (\n    <div className=\"list-group container\">\n        All Anime In Given Genre\n        <table className=\"table-active table-bordered table-striped table-hover table-dark table-sm\">\n        <thead>\n          <tr className=\"bg-secondary text-warning\">\n            <th scope=\"col\" className=\"col-md-3-3 text-center border-light\">Image</th>\n            <th scope=\"col\" className=\"col-md-3-3 text-center border-light\">Name</th>\n            <th scope=\"col\" className=\"col-md-3-3 text-center border-light\">Number of Episodes</th>\n            <th scope=\"col\" className=\"col-md-3-3 text-center border-light\">Genre</th>\n          </tr>\n        </thead>\n        <tbody>\n        {/* <Link to={`/anime/${genre.id}`}><img src={genre.genre_image} class=\"img-fluid rounded p-1 border border-warning bg-warning w-50\"></img></Link> */}\n          {anime &&\n            anime.map((anime) => {\n              return (\n                <tr\n                  key={anime.id}\n                  className=\"table-active\"\n                >\n                  <td className=\"col-md-3 text-center border-light\"><Link to={`/anime/${anime.id}`}><img src={anime.image} className=\"img-fluid rounded h-25 w-75 p-1 border border-warning bg-warning\"></img></Link></td>\n                  <td className=\"col-md-3 text-center border-light\">{anime.name}</td>\n                  <td className=\"col-md-3 text-center border-light\">{anime.episodes}</td>\n                  <td className=\"col-md-3 text-center border-light\"> {anime.genre_name}</td>\n                </tr>\n              );\n            })}\n        </tbody>\n        </table>\n    </div>\n  );\n};\n\nexport default AllAnimeInGivenGenre;\n","/Users/gszm/anime_wiki/client/src/components/MyLoader.js",[],[],"/Users/gszm/anime_wiki/client/src/apis/AnimeFinder.js",[],[],"/Users/gszm/anime_wiki/client/src/context/UserContext.js",[],[],{"ruleId":"221","severity":1,"message":"222","line":3,"column":8,"nodeType":"223","messageId":"224","endLine":3,"endColumn":16},{"ruleId":"221","severity":1,"message":"225","line":4,"column":10,"nodeType":"223","messageId":"224","endLine":4,"endColumn":20},{"ruleId":"226","severity":1,"message":"227","line":38,"column":6,"nodeType":"228","endLine":38,"endColumn":13,"suggestions":"229"},{"ruleId":"230","severity":1,"message":"231","line":63,"column":69,"nodeType":"232","endLine":63,"endColumn":169},{"ruleId":"221","severity":1,"message":"233","line":5,"column":9,"nodeType":"223","messageId":"224","endLine":5,"endColumn":16},{"ruleId":"221","severity":1,"message":"234","line":7,"column":11,"nodeType":"223","messageId":"224","endLine":7,"endColumn":23},{"ruleId":"226","severity":1,"message":"227","line":30,"column":6,"nodeType":"228","endLine":30,"endColumn":13,"suggestions":"235"},{"ruleId":"221","severity":1,"message":"236","line":34,"column":13,"nodeType":"223","messageId":"224","endLine":34,"endColumn":21},{"ruleId":"230","severity":1,"message":"231","line":83,"column":23,"nodeType":"232","endLine":86,"endColumn":24},{"ruleId":"237","severity":1,"message":"238","line":38,"column":11,"nodeType":"232","endLine":38,"endColumn":29},{"ruleId":"221","severity":1,"message":"239","line":3,"column":8,"nodeType":"223","messageId":"224","endLine":3,"endColumn":19},{"ruleId":"221","severity":1,"message":"236","line":17,"column":11,"nodeType":"223","messageId":"224","endLine":17,"endColumn":19},{"ruleId":"221","severity":1,"message":"240","line":17,"column":21,"nodeType":"223","messageId":"224","endLine":17,"endColumn":32},{"ruleId":"226","severity":1,"message":"227","line":30,"column":6,"nodeType":"228","endLine":30,"endColumn":13,"suggestions":"241"},{"ruleId":"237","severity":1,"message":"238","line":100,"column":7,"nodeType":"232","endLine":100,"endColumn":25},{"ruleId":"221","severity":1,"message":"242","line":1,"column":10,"nodeType":"223","messageId":"224","endLine":1,"endColumn":21},{"ruleId":"221","severity":1,"message":"243","line":11,"column":18,"nodeType":"223","messageId":"224","endLine":11,"endColumn":26},{"ruleId":"221","severity":1,"message":"244","line":13,"column":11,"nodeType":"223","messageId":"224","endLine":13,"endColumn":19},{"ruleId":"221","severity":1,"message":"245","line":20,"column":10,"nodeType":"223","messageId":"224","endLine":20,"endColumn":19},{"ruleId":"221","severity":1,"message":"246","line":22,"column":11,"nodeType":"223","messageId":"224","endLine":22,"endColumn":24},{"ruleId":"221","severity":1,"message":"247","line":22,"column":26,"nodeType":"223","messageId":"224","endLine":22,"endColumn":42},{"ruleId":"248","severity":1,"message":"249","line":52,"column":51,"nodeType":"250","messageId":"251","endLine":52,"endColumn":53},{"ruleId":"248","severity":1,"message":"249","line":53,"column":52,"nodeType":"250","messageId":"251","endLine":53,"endColumn":54},{"ruleId":"226","severity":1,"message":"227","line":68,"column":6,"nodeType":"228","endLine":68,"endColumn":13,"suggestions":"252"},{"ruleId":"237","severity":1,"message":"238","line":127,"column":7,"nodeType":"232","endLine":127,"endColumn":25},{"ruleId":"221","severity":1,"message":"242","line":2,"column":10,"nodeType":"223","messageId":"224","endLine":2,"endColumn":21},{"ruleId":"221","severity":1,"message":"253","line":2,"column":23,"nodeType":"223","messageId":"224","endLine":2,"endColumn":32},{"ruleId":"221","severity":1,"message":"254","line":14,"column":10,"nodeType":"223","messageId":"224","endLine":14,"endColumn":16},{"ruleId":"221","severity":1,"message":"255","line":14,"column":18,"nodeType":"223","messageId":"224","endLine":14,"endColumn":27},{"ruleId":"237","severity":1,"message":"238","line":54,"column":11,"nodeType":"232","endLine":54,"endColumn":29},{"ruleId":"221","severity":1,"message":"256","line":11,"column":10,"nodeType":"223","messageId":"224","endLine":11,"endColumn":15},{"ruleId":"221","severity":1,"message":"243","line":11,"column":17,"nodeType":"223","messageId":"224","endLine":11,"endColumn":25},{"ruleId":"221","severity":1,"message":"257","line":17,"column":10,"nodeType":"223","messageId":"224","endLine":17,"endColumn":23},{"ruleId":"221","severity":1,"message":"258","line":17,"column":25,"nodeType":"223","messageId":"224","endLine":17,"endColumn":41},{"ruleId":"237","severity":1,"message":"238","line":47,"column":11,"nodeType":"232","endLine":47,"endColumn":29},{"ruleId":"221","severity":1,"message":"259","line":5,"column":3,"nodeType":"223","messageId":"224","endLine":5,"endColumn":16},{"ruleId":"226","severity":1,"message":"227","line":31,"column":6,"nodeType":"228","endLine":31,"endColumn":13,"suggestions":"260"},{"ruleId":"221","severity":1,"message":"236","line":35,"column":13,"nodeType":"223","messageId":"224","endLine":35,"endColumn":21},{"ruleId":"230","severity":1,"message":"231","line":81,"column":23,"nodeType":"232","endLine":84,"endColumn":24},{"ruleId":"221","severity":1,"message":"242","line":2,"column":10,"nodeType":"223","messageId":"224","endLine":2,"endColumn":21},{"ruleId":"221","severity":1,"message":"261","line":9,"column":11,"nodeType":"223","messageId":"224","endLine":9,"endColumn":17},{"ruleId":"221","severity":1,"message":"262","line":10,"column":11,"nodeType":"223","messageId":"224","endLine":10,"endColumn":20},{"ruleId":"221","severity":1,"message":"243","line":15,"column":18,"nodeType":"223","messageId":"224","endLine":15,"endColumn":26},{"ruleId":"221","severity":1,"message":"246","line":16,"column":11,"nodeType":"223","messageId":"224","endLine":16,"endColumn":24},{"ruleId":"221","severity":1,"message":"247","line":16,"column":26,"nodeType":"223","messageId":"224","endLine":16,"endColumn":42},{"ruleId":"226","severity":1,"message":"227","line":44,"column":6,"nodeType":"228","endLine":44,"endColumn":13,"suggestions":"263"},{"ruleId":"237","severity":1,"message":"238","line":77,"column":7,"nodeType":"232","endLine":77,"endColumn":25},{"ruleId":"221","severity":1,"message":"233","line":10,"column":7,"nodeType":"223","messageId":"224","endLine":10,"endColumn":14},{"ruleId":"226","severity":1,"message":"264","line":30,"column":6,"nodeType":"228","endLine":30,"endColumn":8,"suggestions":"265"},{"ruleId":"230","severity":1,"message":"231","line":56,"column":101,"nodeType":"232","endLine":56,"endColumn":201},"no-unused-vars","'AddAnime' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["266"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'history' is assigned a value but never used.","'loggedInUser' is assigned a value but never used.",["267"],"'response' is assigned a value but never used.","jsx-a11y/no-redundant-roles","The element form has an implicit role of form. Defining this explicitly is redundant and should be avoided.","'AnimeFinder' is defined but never used.","'setResponse' is assigned a value but never used.",["268"],"'useLocation' is defined but never used.","'setState' is assigned a value but never used.","'addAnime' is assigned a value but never used.","'genreName' is assigned a value but never used.","'genreResponse' is assigned a value but never used.","'setGenreResponse' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["269"],"'useParams' is defined but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'state' is assigned a value but never used.","'requestStatus' is assigned a value but never used.","'setRequestStatus' is assigned a value but never used.","'editAnimeCall' is defined but never used.",["270"],"'genres' is assigned a value but never used.","'addGenres' is assigned a value but never used.",["271"],"React Hook useEffect has missing dependencies: 'REQUEST_STATUS.FAILURE', 'REQUEST_STATUS.SUCCESS', 'id', and 'setAnime'. Either include them or remove the dependency array.",["272"],{"desc":"273","fix":"274"},{"desc":"273","fix":"275"},{"desc":"273","fix":"276"},{"desc":"273","fix":"277"},{"desc":"273","fix":"278"},{"desc":"273","fix":"279"},{"desc":"280","fix":"281"},"Update the dependencies array to be: [fetchData, state]",{"range":"282","text":"283"},{"range":"284","text":"283"},{"range":"285","text":"283"},{"range":"286","text":"283"},{"range":"287","text":"283"},{"range":"288","text":"283"},"Update the dependencies array to be: [REQUEST_STATUS.FAILURE, REQUEST_STATUS.SUCCESS, id, setAnime]",{"range":"289","text":"290"},[1140,1147],"[fetchData, state]",[978,985],[1110,1117],[2676,2683],[947,954],[1540,1547],[992,994],"[REQUEST_STATUS.FAILURE, REQUEST_STATUS.SUCCESS, id, setAnime]"]